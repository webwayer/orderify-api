import * as request from 'request-promise'

export function generateStartOauthUrl(queryParams: generateStartOauthUrlQueryParams): string {
    const query = Object.entries(queryParams).map(([key, value]) => `${key}=${value}`).join('&')

    return `https://www.facebook.com/v4.0/dialog/oauth?${query}`
}

interface generateStartOauthUrlQueryParams {
    redirect_uri: string
    scope: string
    client_id: string
    state: string
    response_type: string
}

export async function exchangeCodeForAcessToken(queryParams: exchangeCodeForAcessTokenQueryParams): Promise<exchangeCodeForAcessTokenReturnObject> {
    return JSON.parse(await request.get({
        qs: queryParams,
        uri: `https://graph.facebook.com/v4.0/oauth/access_token`
    }))
}

interface exchangeCodeForAcessTokenQueryParams {
    code: string
    redirect_uri: string
    client_id: string
    client_secret: string
}

interface exchangeCodeForAcessTokenReturnObject {
    access_token: string
    token_type: 'bearer'
    expires_in: number
}

export async function getFacebookUserProfile(access_token: string, facebookUserId: string, queryParams: getFacebookUserProfileQueryParams) {
    return JSON.parse(await request.get({
        qs: Object.assign({ access_token }, queryParams),
        uri: `https://graph.facebook.com/v4.0/${facebookUserId}`
    }))
}

interface getFacebookUserProfileQueryParams {
    fields: string
}

export async function getFacebookAlbums(access_token: string, sourceId: string, queryParams: defaultGetQueryParams) {
    const albumsRaw = JSON.parse(await request.get({
        qs: Object.assign({ access_token }, queryParams),
        uri: `https://graph.facebook.com/${sourceId}/albums`
    }))

    return albumsRaw.data
}

export async function getFacebookPhotos(access_token: string, sourceId: string, queryParams: defaultGetQueryParams) {
    const photosRaw = JSON.parse(await request.get({
        qs: Object.assign({ access_token }, queryParams),
        uri: `https://graph.facebook.com/${sourceId}/photos`
    }))

    return photosRaw.data
}

interface defaultGetQueryParams {
    fields: string
    limit: number
}