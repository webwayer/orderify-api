import { UserType } from 'user/_/User'
import { facebookGraphFactory } from 'io/facebookGraphFactory'

export function userFactory(User: UserType, facebookGraph: ReturnType<typeof facebookGraphFactory>) {
    async function findByEmail(email: string) {
        const user = await User.findOne({ where: { email } })

        return {
            id: user.id,
            email: user.email,
            name: user.name,
        }
    }

    async function findByFacebookAccessToken(access_token: string) {
        const facebookUserProfile = await facebookGraph.makeRequest(access_token, 'me', '', {
            fields: 'email,id,first_name,last_name,middle_name,name,name_format,picture,short_name'
        })

        return await findByEmail(facebookUserProfile.email)
    }

    async function createFromFacebook(accessData: FacebookAccessData) {
        const facebookUserProfile = await facebookGraph.makeRequest(accessData.access_token, 'me', '', {
            fields: 'email,id,first_name,last_name,middle_name,name,name_format,picture,short_name'
        })

        return await User.create({
            email: facebookUserProfile.email,
            name: facebookUserProfile.short_name,
            facebook: JSON.stringify({
                facebookUserProfile,
                accessData,
                createdAt: new Date(),
                updatedAt: new Date(),
            })
        })
    }

    async function updateFacebookMetadata(userId: number, accessData: FacebookAccessData) {
        const user = await User.findByPk(userId)

        const facebookUserProfile = await facebookGraph.makeRequest(accessData.access_token, 'me', '', {
            fields: 'email,id,first_name,last_name,middle_name,name,name_format,picture,short_name'
        })

        const facebookMetadata = JSON.parse(user.facebook)
        facebookMetadata.facebookUserProfile = facebookUserProfile
        facebookMetadata.updatedAt = new Date()
        facebookMetadata.accessData = accessData

        await user.update({
            facebook: JSON.stringify(facebookMetadata)
        })
    }

    return {
        findByEmail,
        
        findByFacebookAccessToken,
        createFromFacebook,
        updateFacebookMetadata,
    }
}

interface FacebookAccessData {
    access_token: string
    expires_in: number
    token_type: string
    granted_scopes: string
    denied_scopes: string
}