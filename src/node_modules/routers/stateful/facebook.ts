import { Router } from 'express'
import { randomBytes } from 'crypto'
import { userFactory } from 'user/user'
import { fromFacebookFactory } from 'photoLibrary/fromFacebook'
import { facebookOauthFactory } from 'io/facebookOauthFactory'

export function facebookLoginRouterFactory(router: Router, CONFIG: { REDIRECT_PATH: string }, userHelper: ReturnType<typeof userFactory>, facebookOauth: ReturnType<typeof facebookOauthFactory>, fromFacebook: ReturnType<typeof fromFacebookFactory>) {
    router.get('/login/facebook', async (req, res) => {
        const csrf_token = await cryptoRandomBytes(128)

        req.session.facebook_login_csrf_token = csrf_token

        const queryParams = {
            scope: 'email,user_photos',
            state: csrf_token,
            response_type: 'code,granted_scopes'
        }

        const facebookLoginUrl = facebookOauth.generateStartOauthUrl(queryParams)

        res.redirect(facebookLoginUrl)
    })

    router.get(`/${CONFIG.REDIRECT_PATH}`, async (req, res) => {
        const { code, granted_scopes, denied_scopes, state, error_reason, error, error_description } = req.query

        if (!error && state === req.session.facebook_login_csrf_token) {
            const { access_token, expires_in, token_type } = await facebookOauth.exchangeCodeForAcessToken(code)

            const accessData = {
                access_token,
                expires_in,
                token_type,
                granted_scopes,
                denied_scopes,
            }

            if (access_token) {
                let user = await userHelper.findByFacebookAccessToken(access_token)
                if (!user) {
                    user = await userHelper.createFromFacebook(accessData)
                } else {
                    await userHelper.updateFacebookMetadata(user.id, accessData)
                }

                await new Promise((resolve, reject) => {
                    req.session.regenerate(err => err ? reject(err) : resolve())
                })

                await fromFacebook.upload(user.id, access_token)

                req.session.userId = user.id
            }
        }

        res.redirect('/photos')
    })

    return router;
}

async function cryptoRandomBytes(num: number): Promise<string> {
    return await new Promise((resolve, reject) => {
        randomBytes(num, function (err, buffer) {
            if (err) {
                reject(err)
            }
            resolve(buffer.toString('hex'))
        });
    })
}