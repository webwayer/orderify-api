import * as passport from 'passport'
import { Strategy as FacebookStrategy } from 'passport-facebook'
import { UserType } from 'User'

export function passportFactory(config: FACEBOOK_CONFIG, User: UserType) {
    passport.use(new FacebookStrategy({
        clientID: config.FACEBOOK_CLIENT_ID,
        clientSecret: config.FACEBOOK_CLIENT_SECRET,
        callbackURL: config.FACEBOOK_CALLBACK_URL,
    },
        async function (accessToken, refreshToken, profile, cb) {
            let user = await User.findOne({ where: { facebookProfileId: profile.id } })

            if (!user) {
                user = await User.create({
                    name: profile.displayName,
                    facebookProfileId: profile.id,
                    facebookAccessToken: accessToken,
                })
            } else {
                await user.update({
                    facebookAccessToken: accessToken,
                })
            }

            cb(null, user)
        }
    ))

    passport.serializeUser(function (user: any, done) {
        done(null, user.id);
    });

    passport.deserializeUser(async function (userId: any, done) {
        const user = await User.findByPk(userId);
        done(null, user);
    });

    return passport;
}

export interface FACEBOOK_CONFIG {
    FACEBOOK_CLIENT_ID: string,
    FACEBOOK_CLIENT_SECRET: string,
    FACEBOOK_CALLBACK_URL: string,
}